// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  fullname      String   @db.VarChar(255)
  email         String   @unique @db.VarChar(255)
  username      String   @db.VarChar(255)
  password      String   @db.VarChar(255)
  phoneNumber   String
  role          RoleUser @default(CLIENT)
  sellerProfile Seller?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  reviews Review[]
}

enum RoleUser {
  ADMIN
  CLIENT
  SELLER
}

model Seller {
  id            String     @id @default(uuid())
  userId        String     @unique
  businessName  String
  businessType  SellerType
  businessPhone String
  description   String?    @db.Text
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id])

  products Product[]
  services Service[]
}

enum SellerType {
  PRODUCT_SELLER
  SERVICE_PROVIDER
  BOTH
}

model Product {
  id          String   @id @default(uuid())
  sellerId    String
  name        String   @db.Text
  description String?
  unit        String   @db.Text
  price       Decimal  @db.Decimal()
  imageUrl    String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  seller Seller @relation(fields: [sellerId], references: [id])

  reviews Review[]
}

model Service {
  id          String   @id @default(uuid())
  sellerId    String
  name        String   @db.Text
  description String?
  price       Decimal  @db.Decimal()
  imageUrl    String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  seller Seller @relation(fields: [sellerId], references: [id])

  reviews Review[]
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String?
  serviceId String?
  comment   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id])
  product Product? @relation(fields: [productId], references: [id])
  service Service? @relation(fields: [serviceId], references: [id])
}
